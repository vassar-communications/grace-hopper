

//	This removes padding, max-width, etc
@mixin resetDrupalSection() {
	padding: var(--component-padding, 0);

	.content.py-3 {
		max-width: var(--content-mw, none);
		margin: var(--content-margin, 0);
		padding: var(--content-padding, 0) !important;
	}
}

//	Grid collapses at a specified column width (default is 20em)
//	This offers two methods: flex and grid. Flex supports reversing
//	columns; grid doesn't.
//	This is best used for a layout of two or three columns.
@mixin autoCollapseCols($minColWidth:20rem, $method:flex) {
	@if $method == "flex" {
		display: flex;
		flex-wrap: wrap;

		//	class-agnostic columns
		& > * {
			flex: 1 1 $minColWidth;
		}
	}
	@else {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax($minColWidth, 1fr));		
	}
}

//	Defines an auto-collapsing grid with a specified number of columns
@mixin twoCols-autoCollapse($numberOfCols:2, $minColWidth:20rem) {
	display: flex;
	flex-wrap: wrap;

	//	class-agnostic columns
	& > * {
		flex: 1 1 max($minColWidth, calc(100vw / $numberOfCols));
	}
}


@mixin objectFit($type:cover) {
	position: absolute;
	width: 100%;
	height: 100%;
	object-fit: $type;
}


@function makeCamelCase($str) {
  $camel-case-str: str-slice($str, 1, 1);
  @for $i from 2 through str-length($str) {
	$char: str-slice($str, $i, $i);
	$prev-char: str-slice($str, $i - 1, $i - 1);
	@if $prev-char == '-' {
	  $camel-case-str: #{$camel-case-str}#{to-upper-case($char)};
	} @else if $char != '-' {
	  $camel-case-str: #{$camel-case-str}#{$char};
	}
  }
  @return $camel-case-str;
}




@mixin hook($prop, $value) {  
  $namespace: if(variable-exists(namespace), $namespace, 'na');
  $propToken: makeCamelCase($prop);
	#{$prop}: var(--#{$namespace}-#{$propToken}, #{$value})
}


//	fluid rems
//	- expects all values to be rems
//	- only one rem value! do not use with shorthand like 4rem 6rem !!!
//	Example usage:

//	.bob {
//		@include flr(margin, 1rem, 7rem);
//	}
@mixin flr($property, $min-value, $max-value) {
  // Calculate the vw equivalent of the max-value
  $max-value-vw: calc($max-value / 1rem) * 1vw;

  #{$property}: clamp(#{$min-value}, #{$max-value-vw}, #{$max-value});
}






